{"$message_type":"diagnostic","message":"use of deprecated function `cosmwasm_std::to_binary`: use to_json_binary instead","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"src/contract.rs","byte_start":94,"byte_end":103,"line_start":4,"line_end":4,"column_start":11,"column_end":20,"is_primary":true,"text":[{"text":"    coin, to_binary, BankMsg, Binary, Deps, DepsMut, Env, MessageInfo, Response, StdResult, Uint128,","highlight_start":11,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(deprecated)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated function `cosmwasm_std::to_binary`: use to_json_binary instead\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/contract.rs:4:11\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    coin, to_binary, BankMsg, Binary, Deps, DepsMut, Env, MessageInfo, Response, StdResult, Uint128,\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(deprecated)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"use of deprecated function `cosmwasm_std::to_binary`: use to_json_binary instead","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"src/contract.rs","byte_start":4696,"byte_end":4705,"line_start":158,"line_end":158,"column_start":39,"column_end":48,"is_primary":true,"text":[{"text":"        QueryMsg::GetUser { user } => to_binary(&get_user(deps, user)?),","highlight_start":39,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated function `cosmwasm_std::to_binary`: use to_json_binary instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/contract.rs:158:39\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m158\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        QueryMsg::GetUser { user } => to_binary(&get_user(deps, user)?),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"use of deprecated function `cosmwasm_std::to_binary`: use to_json_binary instead","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"src/contract.rs","byte_start":4776,"byte_end":4785,"line_start":159,"line_end":159,"column_start":46,"column_end":55,"is_primary":true,"text":[{"text":"        QueryMsg::GetVotingPower { user } => to_binary(&get_voting_power(deps, user)?),","highlight_start":46,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated function `cosmwasm_std::to_binary`: use to_json_binary instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/contract.rs:159:46\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m159\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        QueryMsg::GetVotingPower { user } => to_binary(&get_voting_power(deps, user)?),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\n"}
No nondet value for path segment: "BigInt"
No nondet value for path segment: "BigInt"
No nondet value for path segment: "BigInt"
No nondet value for path segment: "SystemState"
No nondet value for path segment: "StepInfo"
No nondet value for path segment: "HashMap[str, UserInfo]"
No nondet value for path segment: "BigInt"
No nondet value for path segment: "MsgInfo"
No nondet value for path segment: "MsgArgs"
No nondet value for path segment: "BigInt"
No nondet value for path segment: "BigInt"
No nondet value for path segment: "BigInt"
No nondet value for path segment: "BigInt"
No nondet value for path segment: "BigInt"
Too complex list type: Coin. Generating simple list with 1 element.
No nondet value for path segment: "BigInt"
Too complex list type: Coin. Generating simple list with 1 element.
No nondet value for path segment: "BigInt"
No nondet value for path segment: "BigInt"
No nondet value for path segment: "BigInt"
No nondet value for path segment: "BigInt"
No nondet value for path segment: "BigInt"
No nondet value for path segment: "BigInt"
No nondet value for path segment: "BigInt"
No nondet value for path segment: "HashMap[str, UserInfo]"
No nondet value for path segment: "BigInt"
No nondet value for path segment: "MsgArgs"
{"$message_type":"diagnostic","message":"3 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 3 warnings emitted\u001b[0m\n\n"}
